;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/2/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <delay.h>
;
;#include <stdio.h>
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003F char status,data;
; 0000 0040 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0041 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0042 
; 0000 0043 //using buffer , use rx_wr_index
; 0000 0044 if(rx_wr_index == 7){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0045  lcd_puts(rx_buffer);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0046 }
; 0000 0047 
; 0000 0048 //comment the code above and use this code instead:
; 0000 0049 //each time one character is received we print it on lcd
; 0000 004A //lcd_puts(rx_buffer);
; 0000 004B 
; 0000 004C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004D    {
; 0000 004E    rx_buffer[rx_wr_index++]=data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004F #if RX_BUFFER_SIZE == 256
; 0000 0050    // special case for receiver buffer size=256
; 0000 0051    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 0052 #else
; 0000 0053    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0054    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0055       {
; 0000 0056       rx_counter=0;
;PCODE: $0000002C VOL: 0
; 0000 0057       rx_buffer_overflow=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0058       }
; 0000 0059 #endif
; 0000 005A    }
;PCODE: $00000030 VOL: 0
; 0000 005B }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0062 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0063 char data;
; 0000 0064 while (rx_counter==0);
;PCODE: $00000038 VOL: 0
;	data -> R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0065 data=rx_buffer[rx_rd_index++];
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0066 #if RX_BUFFER_SIZE != 256
; 0000 0067 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0068 #endif
; 0000 0069 #asm("cli")
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
	cli
;PCODE: $00000049 VOL: 0
; 0000 006A --rx_counter;
;PCODE: $0000004A VOL: 0
; 0000 006B #asm("sei")
;PCODE: $0000004B VOL: 0
	sei
;PCODE: $0000004C VOL: 0
; 0000 006C return data;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006D }
;PCODE: $00000050 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0083 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0084 if (tx_counter)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0085    {
; 0000 0086    --tx_counter;
;PCODE: $00000055 VOL: 0
; 0000 0087    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0088 #if TX_BUFFER_SIZE != 256
; 0000 0089    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008A #endif
; 0000 008B    }
;PCODE: $00000060 VOL: 0
; 0000 008C }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0093 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0094 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000067 VOL: 0
;	c -> Y+0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0095 #asm("cli")
;PCODE: $0000006E VOL: 0
	cli
;PCODE: $0000006F VOL: 0
; 0000 0096 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0097    {
; 0000 0098    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0099 #if TX_BUFFER_SIZE != 256
; 0000 009A    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009B #endif
; 0000 009C    ++tx_counter;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009D    }
; 0000 009E else
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009F    UDR=c;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A0 #asm("sei")
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
	sei
;PCODE: $00000089 VOL: 0
; 0000 00A1 }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 00A9 {
;PCODE: $0000008D VOL: 0
; 0000 00AA // Declare your local variables here
; 0000 00AB char c;
; 0000 00AC // Input/Output Ports initialization
; 0000 00AD // Port A initialization
; 0000 00AE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AF DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;	c -> R17
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B1 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B2 
; 0000 00B3 // Port B initialization
; 0000 00B4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 00B5 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 00B7 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B8 
; 0000 00B9 // Port C initialization
; 0000 00BA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00BB DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00BC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BD PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00BE 
; 0000 00BF // Port D initialization
; 0000 00C0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C1 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00C2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C3 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00C4 
; 0000 00C5 // USART initialization
; 0000 00C6 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C7 // USART Receiver: On
; 0000 00C8 // USART Transmitter: On
; 0000 00C9 // USART Mode: Asynchronous
; 0000 00CA // USART Baud Rate: 4800
; 0000 00CB UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00CC UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00CD UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CE UBRRH=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00CF UBRRL=0x67;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00D0 
; 0000 00D1 // Alphanumeric LCD initialization
; 0000 00D2 // Connections are specified in the
; 0000 00D3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D4 // RS - PORTC Bit 0
; 0000 00D5 // RD - PORTC Bit 1
; 0000 00D6 // EN - PORTC Bit 2
; 0000 00D7 // D4 - PORTC Bit 4
; 0000 00D8 // D5 - PORTC Bit 5
; 0000 00D9 // D6 - PORTC Bit 6
; 0000 00DA // D7 - PORTC Bit 7
; 0000 00DB // Characters/line: 16
; 0000 00DC lcd_init(16);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00DD 
; 0000 00DE // Global enable interrupts
; 0000 00DF #asm("sei")
;PCODE: $000000AA VOL: 0
	sei
;PCODE: $000000AB VOL: 0
; 0000 00E0 
; 0000 00E1 
; 0000 00E2 putchar('h');
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E3 delay_ms(100);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E4 putchar('e');
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E5 delay_ms(100);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E6 putchar('l');
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00E7 
; 0000 00E8 delay_ms(100);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00E9 putchar('l');
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00EA 
; 0000 00EB 
; 0000 00EC delay_ms(100);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00ED putchar('o');
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00EE 
; 0000 00EF delay_ms(100);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F0 putchar('o');
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F1 
; 0000 00F2 delay_ms(100);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F3 putchar('o');
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F4 
; 0000 00F5 delay_ms(100);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00F6 putchar('o');
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F7 
; 0000 00F8 while (1)
;PCODE: $000000D1 VOL: 0
; 0000 00F9       {
; 0000 00FA       // Place your code here
; 0000 00FB 
; 0000 00FC 
; 0000 00FD       }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00FE }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
